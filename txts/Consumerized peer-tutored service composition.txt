Expert Systems with Applications 42 (2015) 1028–1038

Contents lists available at ScienceDirect

Expert Systems with Applications

j o u r n a l h o m e p a g e : w w w . e l s e v i e r . c o m / l o c a t e / e s w a

Consumerized and peer-tutored service composition

Klemo Vladimir

⇑
, Ivan Budiselic´, Siniša Srbljic´

University of Zagreb, Faculty of Electrical Engineering and Computing, Consumer Computing Lab, Unska 3, 10000 Zagreb, Croatia

a r t i c l e

i n f o

a b s t r a c t

Article history:
Available online 28 September 2014

Keywords:
Service composition
Peer tutoring
Knowledge sharing
Consumerization of service composition
tools
Expertise location
Social matching

With continued development towards the Internet of Things, services are making their way from
enterprise solutions to our ofﬁces and homes. This process is a major driving force in consumerization
of IT, because sustainable application development at this scale will not be possible without direct
involvement and innovation from consumers themselves. In this paper, we present our work on
consumerization of service composition tools. First, we describe how consumer-facing services can be
presented in a usable and intuitive way. Then, combining social computing with machine intelligence,
we deﬁne a recommender system that supports consumers in sharing their knowledge and creativity
in peer-tutored service composition, thus empowering consumers to create their own applications. This
system recommends consumers with the required service composition knowledge based on mining
procedural knowledge stored in previously deﬁned compositions. Once such a group of consumers is
identiﬁed, social computing tools are used to allow them to share this knowledge with their peers. To
demonstrate the effectiveness of this peer-tutored service composition model, we performed consumer
satisfaction studies on our consumerized service composition tool Geppeto, which we extended with the
described recommender system. Results show signiﬁcant improvements in service composition in terms
of performance and quality of experience.

Ó 2014 Elsevier Ltd. All rights reserved.

1. Introduction

Over the last couple of years, the Web underwent a rapid process
of transition from a primarily passive consumer medium to an
active collaborative environment. The success of Web 2.0, an
umbrella term for a series of interventions and developments in
digital networking technologies we all use on a daily basis, clearly
shows the way for future development. One of the most important
dimensions of this new Web is the notion of commons-based peer
production, as Yochai Benkler calls this paradigm shift (Benkler &
Nissenbaum, 2006). In this kind of communal production, work is
jointly owned and accessed by its participants who operate as peers
without need for a hierarchical organization of collaboration. Since
the number of Web consumers is growing rapidly and with prolif-
eration of ubiquitous mobile devices, it is reasonable to expect that
this trend of online collaboration will evolve to not only production
of data and information, such as in Wikipedia, but also to produc-
tion of more advanced forms of creative work like software.

The creative force of all Web consumers, called cognitive surplus
by Shirky (2010), can be utilized for creation, customization and

automation of software artifacts. Today, programming environ-
ments for Web consumers are mostly focused on building situa-
tional, on-the-ﬂy applications by combining existing services. For
example, web mashups are applications generated by combining
content, presentation, or application functionality from disparate
Web sources (Yu, Benatallah, Casati, & Daniel, 2008). This process
of content combination, or remixing, is usually carried out using
some kind of GUI-oriented methodology, thus circumventing a tra-
ditional textual programming interface. For instance, Yahoo!Pipes,1
which is one of the most popular mashup editors, allows consumers
to process and remix data by visually connecting various modules.

While Yahoo!Pipes focuses solely on data ﬂow, the consumer
programming tool Geppeto2 developed in our research group
extends this paradigm beyond data ﬂow, enabling consumers to
deﬁne service compositions with control ﬂow, event ﬂow, temporal
dependencies, location awareness, communication and synchroniza-
tion. In the near future, tools like Geppeto will allow consumers to
create large sets of service compositions and expand community
composition knowledge.

Based on current experiences in software engineering, it can
be concluded that building communicating, synchronized, and

⇑ Corresponding author.

E-mail addresses: klemo.vladimir@fer.hr (K. Vladimir), ivan.budiselic@fer.hr (I.

Budiselic´), sinisa.srbljic@fer.hr (S. Srbljic´).

1 http://pipes.yahoo.com
2 http://shadowfax.zemris.fer.hr:8080/geppeto/index.html

http://dx.doi.org/10.1016/j.eswa.2014.09.033
0957-4174/Ó 2014 Elsevier Ltd. All rights reserved.

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

1029

distributed service compositions that are event-, time-, and loca-
tion-driven will never be easy. To address this inherent difﬁculty,
assistants that help consumers in service composition, from ﬁnding
and understanding component services to wiring them together,
are a cornerstone of consumer computing. In this paper, we focus
on such an assistant for peer-tutored service composition.

A prerequisite for effective peer tutoring, which aims to enable
ad hoc, dynamic, and problem oriented gathering of qualiﬁed
consumers, is tutor identiﬁcation. A good candidate tutor should
possess tacit knowledge about the services related to a problem
and how they can be composed. However, people are often not
fully aware of their tacit knowledge, or how this knowledge can
be valuable to other consumers and how it correlates to collective
knowledge of the larger community. Our research presented in this
paper is based on the following hypothesis: Since procedural
knowledge encoded in a service composition created by a con-
sumer is derived from that consumer’s tacit knowledge, consumers
with the required tacit knowledge can be identiﬁed through
analysis of the compositions they had created.

The process of consumerized service composition using a
peer-tutor recommender is shown in Fig. 1. A key object used in
peer-tutor identiﬁcation is the partial service composition which a
consumer created before encountering a challenge and asking for
a tutor. While incomplete, this partial composition encodes parts
of the consumer’s tacit knowledge about the problem that is being
solved. Furthermore, for many problem domains, it is likely that
other consumers have already created compositions in that
domain. These compositions are stored and analyzed, and are the
basis for tutor identiﬁcation. Speciﬁcally, the partial service com-
position created by the consumer asking for a tutor is compared
to other compositions stored in the composition database using
machine intelligence techniques. Authors of similar compositions
are identiﬁed as potential tutors as they are likely to have the
required tacit knowledge to help solve the problem. Once potential
tutors are identiﬁed, social computing tools are used for peer tutor-
ing with the goal of sharing service composition knowledge in the
consumer community.

The rest of the paper is organized as follows. Section 2 gives an
overview of related work in peer tutoring and tutor recommenda-
tion. In Section 3, we review our research in consumerization of

S
e
r
v
i
c
e
 
c
o
m
p
o
s
i
Ɵ
o
n

Consumer’s 
composiƟon 

problem

Tacit community 

composiƟon 
knowledge

Peer-tutored

service composiƟon

Social

compuƟng

Consumer

Consumer community

Geppeto

ParƟal 

composiƟon
(Consumer’s 
procedural 
knowledge)

i

d
e
n
Ɵ
ﬁ
c
a
Ɵ
o
n

T
u
t
o
r
 

Machine

intelligence

Procedural knowledge

mining

Geppeto

Procedural 
community 
composiƟon 
knowledge

service computing technology. We describe our consumerized
service composition tool Geppeto, discuss beneﬁts of this approach
to service composition and challenges that arise in it. In Section 4,
we show how peer tutoring can be integrated into a consumerized
service composition environment. In Section 5, we describe how
service composition procedural knowledge is encoded in the
recommender, and describe the peer-tutor recommender algorithm
itself. In Section 6 we brieﬂy describe how Geppeto was augmented
with the tutor recommender system. To evaluate the effectiveness
of the proposed recommender, we carried out a consumer study
with our students. The study setup and results are given in
Section 7. Section 8 concludes the paper and proposes future
research directions.

2. Related work

Our approach to peer-tutored service composition employs
recent technology advancements in multiple domains: correlating
different aspects of knowledge; knowledge authorship attribution;
expertise location and sharing; recommendation in the context of
social matching; dynamic, ad hoc, and problem-oriented social
networking; and knowledge automation assistance.

2.1. Correlating different aspects of knowledge

Contemporary socially-intelligent computing, based on a syn-
ergy of computation and human intelligence, gave rise to research
in knowledge management technologies that enable correlation of
different aspects of knowledge: tacit and procedural, individual
and collective, artiﬁcial and human, knowledge and meta-knowl-
edge. Most of these aspects of knowledge correlation are critical
for peer-tutored service composition: (I) tutors with required tacit
knowledge about service composition are identiﬁed by procedural
knowledge embedded in service compositions stored in developed
applications, (II) individual tutors with required expertise are iden-
tiﬁed based on mining of collective procedural knowledge embed-
ded in applications that are developed by a community of peers,
(III) collaborative peer tutoring requires correlating individual tacit
knowledge of a peer to collective knowledge of a community of
tutors, and (IV) the artiﬁcial meta-knowledge derived from proce-
dural knowledge mining is correlated to peers’ (human) tacit knowl-
edge to enable correct tutor identiﬁcation. Although knowledge
representation, correlation, management and transfer have been
in research focus for a long period of time (Liao, 2003), recent tech-
nology development enables pragmatic use of this research in var-
ious areas such as in search engines (Bobick & Wimmer, 2012), the
semantic web (Berners-Lee, Hendler, & Lassila, 2001), and human
computation (Quinn & Bederson, 2011).

S
e
r
v
i
c
e
 
c
o
m
p
o
s
i
Ɵ
o
n

2.2. Knowledge authorship attribution

Source code authorship attribution is an example of author
identiﬁcation based on procedural knowledge. Authorship attribu-
tion is deﬁned as the process of assigning authorship of an unat-
tributed or contentious sample of work to its correct author
amongst a ﬁnite pool of authors (Burrows, 2010). In his thesis, Bur-
rows introduces authorship attribution as a subset of ﬁelds such as
software forensics and plagiarism detection. While knowledge
authorship attribution is usually used to differentiate between
authors’ coding styles, we research these methods for the purpose
of service composition matching.

2.3. Expertise location and sharing

Fig. 1. Peer-tutored service composition and expertise location based on procedural
composition knowledge mining.

Several knowledge-based recommender systems are described
in the literature that depend on the explicit domain-speciﬁc

1030

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

knowledge models using similarities between customer require-
ments and items or using explicit recommendation rules. In the
context of expertise location, identiﬁcation and selection are con-
sidered general search problems (McDonald & Ackerman, 1998).
The expertise identiﬁcation process outputs a list of users in the
community who have expertise to share. Once a list of relevant
experts is available, the process of expertise selection is used to
choose between one or more appropriate expertise sources.

The expertise recommender model is often cited as a general
architectural model for expert recommender systems (McDonald
& Ackerman, 2000). Another expertise recommender system
described in Ehrlich (2003) puts emphasis on the whole process
of expertise location as a way to initiate a conversation with the
right person rather than merely designing the system as a search
tool. Additionally, the importance of expertise locators in the pro-
cess of linking people who might never have an opportunity to
meet face to face is highlighted. The requirements for the design
of an expertise locator in this kind of setting are user experience,
system performance, and scalability. According to the authors,
these requirements can be satisﬁed by careful design of user pro-
ﬁles that must contain information on what a user knows as well
as context and history of a person.

Ackerman and Halverson in (Ackerman & Halverson, 2004) ana-
lyze different possibilities for expertise sharing by means of tech-
nical augmentation of repositories and social networks. They give
examples of technically created community places where people
share expertise with one another. Those places are usually imple-
mented using popular communication technologies on the Inter-
net, such as instant chat or Web-based platforms. Another
overview of tools for virtual assistance and expert ﬁnding is given
in Bakker (2002). Implementation of expertise locators is usually
carried out using implicit recommender systems, which are based
on expertise identiﬁcation, or social network based recommender
systems, which extend this approach with social network connec-
tions of the user (Shami, Ehrlich, Gay, & Hancock, 2009).

2.4. Recommendation in the context of social matching

that

explicitly

Historically, recommender systems emerged from recommen-
relied on item ratings
dation problems
(Adomavicius & Tuzhilin, 2005). The problem that recommender
systems solve is how to estimate ratings for new items that have
not been rated yet. Estimated ratings provide sufﬁcient information
for the process of recommendation, since we can recommend the
items with the highest estimated ratings to the user. Based on the
actual process of how recommender systems make their recom-
mendations, they are classiﬁed into content-based, collaborative ﬁl-
tering, and knowledge-based recommender systems (Jannach,
Zanker, Felfernig, & Friedrich, 2010). Since our goal is tutor recom-
mendation for the purpose of peer tutoring, our research is focused
on social matching systems. Introduction of social aspects in context
of recommender systems can direct research in two areas: (I) infor-
mation derived from the social graph can be used to improve predic-
tions of traditional recommendation systems (Xin, King, Deng, &
Lyu, 2009) and (II) research on social matching systems as recom-
mender systems that recommend people to each other instead of
recommending items to people (Terveen & McDonald, 2005). Some
other recommender systems can also be classiﬁed as social match-
ing systems. A large portion of social matching systems are based on
social relationship analysis by utilizing connections between mem-
bers of the community (Kautz, Selman, & Shah, 1997). PHOAKS
(Terveen, Hill, Amento, McDonald, & Creter, 1997) recommends
Web resources within a newsgroup by listing resources for topics
users are interested in. Social connection is possible because users
are able to see who posted or recommended particular resources.
Designer Assistant helps disseminate knowledge by structuring

organizational knowledge into a series of questions and answers
tagged with owners (Terveen, Selfridge, & Long, 1995). Social
matching is also interesting in context of academic publishing
where published work and citation patterns can be analyzed for
connecting experts in speciﬁc research areas (Moreira & Wichert,
2013).

2.5. Dynamic, ad hoc, and problem-oriented social networking

While we focus on dynamic creation of ad hoc communities
that emerge around speciﬁc problems in service composition, there
is signiﬁcant research on communities of practice that emerge
around common domains or interests and are static in nature. A
community of practice is a collection of people who engage on
an ongoing basis in some common endeavor (Eckert, 2006). Differ-
ent authors stress different aspects, such as Wenger (1998) who
deﬁnes communities of practice as groups of people who share a
concern or a passion for something they do and learn how to do
it better as they interact regularly.

Results from Chiu, Hsu, and Wang (2006) suggest that group
interaction and the strength of the relationships among members
are signiﬁcant predictors of individual knowledge sharing, which
nicely ﬁts the model of communities of practice. Another impor-
tant aspect of knowledge sharing is reciprocity. Since knowledge
exchange involves giving and receiving knowledge, community
members seek balance between their contribution to the commu-
nity and what they take from the community. Additionally, the
study also shows that the health of a virtual community depends
on fostering and maintaining a set of core and experienced individ-
uals whom other consumers can trust. As articulated in Wasko and
Faraj (2005), these core consumer communities create a critical
mass that sustains the network and maintains the network’s use-
fulness by contributing knowledge to others. The same study
describes means of promotion of individual participation in the
critical mass, with individual reputation and social capital being
most important.

A signiﬁcant question emerges regarding the motivation of
community members. Authors in McLure Wasko and Faraj (2000)
suggest that successful communities have members that act out
of community interest rather than self-interest. An interesting
ﬁnding in the same study is that community members do not
use the technology to socialize. Successful communities share a
common feature in that they have members who enjoy helping
others and feel that they have a moral obligation to share knowl-
edge. These ﬁndings are helpful guiding principles for design and
implementation of a strong community with the common goal of
sharing knowledge.

2.6. Service composition assistance

In the work presented in this paper, we use machine learning to
identify peers who have developed similar applications in the past
and might help other peers in service composition. On the other
hand, systems presented in related research mostly use machine
learning to provide information that is used directly in application
development. Fundamental research related to selection and dis-
covery of suitable Web services focuses on the analysis of quality
of service properties in order to make the best service selection
(Parejo, Segura, Fernandez, & Ruiz-Cortés, 2014; Zheng, Ma, Lyu,
& King, 2011). In addition to QoS, service recommendation can also
utilize social connections. For instance, RelevantTrustWalker, a ser-
vice recommendation method is based on user feedback in combi-
nation with trust relationships in social networks (Deng, Huang, &
Xu, 2014).

Service composition assistance is particularly emphasized in
context of consumerized tools for assembling services into working

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

1031

(Elmeleegy,

applications. Mashup Advisor
Ivan, Akkiraju, &
Goodwin, 2008) estimates the popularity of speciﬁc mashup out-
puts in an IBM Lotus Mashup Maker repository and makes output
suggestions using the conditional probability that an output will be
included. Additionally, Mashup Advisor modiﬁes the ﬁnal mashup
in order to produce the suggested output. Greenshpan, Milo, and
Polyzotis (2009) describe a data model and ranking algorithm for
auto-completion in their Mashup development environment. In
Tapia, Torres, Astudillo, and Ortega (2011), authors describe an
approach for helping mashup builders in choosing relevant API
functions by mining information on co-usage of APIs in previous
mashups.
In Roy Chowdhury, Rodríguez, Daniel, and Casati
(2012), authors describe an assisted mashup development envi-
ronment that suggests reusable mashup patterns by mining com-
munity composition knowledge from an existing repository.
Other research follows similar reasoning when recommending
assistance for mashup or service workﬂow development (Angeli
et al., 2011; Jie, Bo, Junliang, & Xiangtao, 2009; Radeck, Lorz,
Blichmann, & Meißner, 2012).

3. Service composition consumerization

In this section, we overview our work on consumerization of
services and service composition, which is the basis for the peer-
tutor recommender system presented in this paper, and discuss
beneﬁts of this approach to service composition and the challenges
it brings.

Through our experience with several iterations of simplifying
service composition, ﬁrst with Coopetition Language (CL) (Srbljic´,
Škvorc, & Skrobo, 2011), which is an extension of WS–BPEL, then
with PIEthon (Srbljic´ et al., 2011), a Python-based DSL for service
composition, and with the service composition spreadsheet-like
language HUSKY (Srbljic, Skvorc, & Popovic, 2012), we found that
service composition could be approachable to consumers with no
software engineering training or experience, given appropriate
tools and an intuitive representation of services. This would enable
consumers to customize and personalize existing consumer-facing
services, and to innovate completely new solutions through service
composition.

As part of our research on such tools and methodologies for
consumerized service composition, we developed a research proto-
type tool Geppeto.3 At the most basic level, Geppeto provides a con-
tainer for hosting Web widgets. Web widgets are graphical user
interfaces for consumer-facing services, developed using standard
Web technologies like HTML and JavaScript. Geppeto enables con-
sumers to develop their own applications by composing these wid-
gets through a language of intuitive GUI actions and programming
by demonstration. By composing widgets in this way, consumers
create a composition of the services underlying the widgets on the
GUI level. Additionally, consumers can expose the resulting compo-
sition as a new widget, which can then be further composed. As wid-
gets are the core component of this environment and the basic
building blocks in compositions, we call this approach to service
composition widget-oriented architecture (Srbljic´, Škvorc, & Skrobo,
2009).

There are three types of widgets used in Geppeto: application-
speciﬁc widgets, generic widgets and consumer assistants. Applica-
tion-speciﬁc widgets provide application domain speciﬁc services,
for example, driving directions displayed on a map. Generic widgets
allow consumers to deﬁne data and control ﬂow, event ﬂow, timing,
communication, and synchronization of the widget composition
through programming by demonstration. Finally, consumer
assistant widgets use crowdsourcing and collective intelligence

3 Originally an acronym for Gadget End-user Parallel Programming Tool.

methods to help consumers during widget composition (Silic,
Delac, Krka, & Srbljic, 2013; Vladimir, 2013).

The Geppeto user interface and an example composition of
widgets is presented in Fig. 2. The composition consists of three
widgets: the GeoLocation widget, the CurrentAddress widget, and
the DrivingDirections widget. The GeoLocation widget outputs the
user’s latitude and longitude based on their current IP address.
The CurrentAddress widget returns a human readable address
that is estimated from the given latitude and longitude. The
DrivingDirections widget renders driving directions on a map for
the given source and destination addresses. All three of these
widgets perform their functionality through communicating with
a service over the network.

These widgets can be used separately and their functionality
combined through copying data between them and clicking
buttons; for instance, the output of the GeoLocation widget can
be explicitly copied and pasted as the input to the CurrentAddress
widget. The address produced by the CurrentAddress widget can
then be copied to the starting address of the DrivingDirections
widget, while the destination address can be entered manually.
However, this process of copying and pasting content between
widgets is menial and it would probably be easier to simply type
in the source address as well.

The Geppeto TouchMe widget enables consumers to automate
this process using the programming by demonstration methodol-
ogy (Srbljic´ et al., 2009). First, a consumer can add the Geppeto
TouchMe widget that is a blank widget without an initial interface.
In the second step, the consumer creates the GUI of the TouchMe
widget by taking GUI elements from existing widgets (marked
red in Fig. 2). Then, as the third step, the consumer deﬁnes the
composition logic for this application by explicitly demonstrating
actions on the GUI elements of the widgets. In Fig. 2, the actions
shown in blue deﬁne the data ﬂow of the composition, such as
copying data from one widget to another, and the green marked
actions deﬁne control ﬂow, for example button mouse clicks. These
actions are saved by the Geppeto TouchMe widget.

The logic that deﬁnes control and data ﬂow of this example
widget composition is listed in Fig. 3. The textual representation
of the Geppeto composition is a series of GUI actions codiﬁed using
simple commands. For instance, the command on line 3 (click
LocateMe!@GeoLocation) deﬁnes a mouse click on the LocateMe!
button of the GeoLocation widget. With the deﬁnition shown in
Fig. 3, the composition is executed by pressing the Go button on
the Geppeto TouchMe widget. Therefore, to get driving directions
with this composition, the consumer only needs to enter the
desired destination address and press the Go button on the
TouchMe widget, and all the other operations are performed
automatically by Geppeto.

A key beneﬁt of a consumerized service composition tool like
Geppeto is that it melds application creation with application con-
sumption–consumers do not need to learn any new end-user lan-
guage, but instead reuse their existing skills attained from using
the Web to create applications. To preserve this property, one of
the design decisions in Geppeto is not to provide support for gen-
eral computation – i.e. all functionality must be explicitly exposed
in form of Web widgets. However, being mostly a research proto-
type, the user base of Geppeto is currently limited to the academic
and research community. Therefore, the widget repository is still
relatively small and covers only basic functionality and popular
services.

Moreover, Geppeto applications are created by composing
graphical Web widgets, a large number of widgets in the same
composition render the composition environment difﬁcult to work
with. In our experience, compositions of up to nine widgets are
common as nine widgets typically ﬁt on one screen in three rows.
Geppeto addresses this limitation by providing support
for

1032

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

Fig. 2. Simple Geppeto composition.

and knowledge sharing between consumers, we utilize recom-
mender systems technology to match consumers with peer-tutors
in real time, during service composition. Speciﬁcally, based on the
partial composition the consumer is creating, the peer-tutor rec-
ommender system ﬁnds other consumers who have relevant
domain knowledge and are willing to share it. This matching is
done by comparing the partial composition with previously cre-
ated compositions and identifying authors of similar compositions
who have chosen to be peer tutors. Having identiﬁed good peer-
tutor candidates, the consumer asking for help is encouraged to
engage a peer-tutor through one of the various forms of communi-
cation, from instant messaging to e-mail. This symbiosis of a tech-
nical system and a social system facilitates knowledge transfer in
the consumer community, as well as encouraging collaboration
and ad hoc problem-oriented communities.

Existing research supports the viability of peer-tutoring with
two key results. First, peer-tutors are able to provide high level
tutoring, at the level of professional tutors, and exceeding the
results of professional
tutoring in some situations (Hinds,
Patterson, & Pfeffer, 2001). Second, consumers are motivated to be
peer-tutors to other consumers. Ambitious and knowledgeable con-
sumers are willing to help each other, especially if they have a learn-
ing environment with peer-tutoring support on their disposal. For
example, a study of the Yahoo!Pipes community showed that there
is a strong core community of Pipes users that are highly active in
problem solving and collective debugging (Jones & Churchill, 2009).
It is important to note that peer tutoring does not need real-
time physical contact (e.g. face-to-face interaction) in order to
transfer knowledge. Advances in digital communication tools, such
as social networks, instant messaging and video chat can be used
to facilitate peer tutoring when consumers need remote access to
tutors. Additionally, since number of knowledgeable and moti-
vated tutors is considerably smaller than number of consumers
and their availability is unpredictable, we are aware of the hypo-
thetical situation when there are no available tutors and the peer
tutoring process will be effectively blocked. However, tutor avail-
ability is a separate problem that is not focus of the research pre-
sented in this paper.

4. Peer-tutoring process

To facilitate knowledge transfer and foster expertise ﬂow from
consumers who have certain expertise to consumers who are inter-
ested in the given expertise, the tutor recommender analyzes

Fig. 3. Textual representation of the Geppeto composition from the Fig. 2.

hierarchical compositions where complex compositions are
exposed in form of single widget that is then used in other compo-
sitions as a basic building block.

Several other challenges of service composition remain or are
even enhanced in this environment. First, discovering and choosing
the right services for a particular problem is becoming increasingly
difﬁcult with the fast growth in this area. Second, having found a
service, the consumer needs to understand what exactly it does
and learn how to use it.

Analogous challenges have been identiﬁed in an analysis of the
Yahoo!Pipes community (Stolee, Elbaum, & Sarma, 2013). Yahoo!-
Pipes is a feed mashup system that shares many characteristics
with Geppeto, most of all in that it is directed towards consumers
and not exclusively software developers. The authors concluded
that many mashup builders need help understanding the behavior
of software artifacts. Furthermore, the authors suggest that better
development support is required to alleviate this challenge.

In addition to service discovery and selection, which can be
partially managed by automatic composition assistance tools, e.g.
next service recommendation, critical problem with service
composition is the usage of services. In the physical world, people
solve problems
through communication and collaboration.
We apply this approach to address the mentioned challenges
in consumerized service composition. To facilitate communication

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

1033

archived procedural knowledge stored in previously created ser-
vice compositions to recommend tutors and assist consumers
who request help. Fig. 4 shows a more detailed description of the
peer-tutored service composition process described in Fig. 1. Ser-
vice compositions created by the consumer community are col-
lected and archived (1). When a consumer asks for help (2), the
partial composition is analyzed and compared to the existing com-
positions to identify potential tutors to recommend. Finally, the list
of recommended tutors is returned to the consumer who asked for
help (3) in order to bootstrap peer tutoring process (4).

The set of tools and technologies of social computing, which
serve as intermediaries for social interaction and provide the fun-
damental collaboration platform underlying the peer-tutoring pro-
cess, are extended with a new set of tools. The service composition
assistant helps consumers in service composition. One possible
implementation of the service composition assistant is the Geppe-
to TouchMe widget described in Section 3. The tutor recommender
wizard provides a dynamic list of peer-tutor candidates who might
provide help during service composition. One possible implemen-
tation of the tutor recommender wizard is the Geppeto MentorMe
widget described in Section 5.

The service composition assistant and the tutor recommender
wizard bridge social computing and machine intelligence environ-
ments. The role of the service composition assistant is twofold.
On one hand, it encodes and stores completed service composi-
tions into the composition archive. This process is called procedural
knowledge archiving in the Fig. 4. On the other hand, it monitors
and encodes the consumer’s service composition and submits the
partially ﬁnished compositions to the peer-tutor recommender in
the machine intelligence environment. The tutor recommender
wizard performs procedural knowledge mining of archived proce-
dural knowledge and communicates the results of knowledge min-
ing in the form of a list of recommended tutors to the service
composition assistant in the social computing environment.

5. Tutor recommendation

In this section, we present possible procedural knowledge enco-
dings and describe the tutor recommender algorithm. Tutor rec-
ommendation is performed in two steps. In the ﬁrst step, the
partially ﬁnished service composition created by the consumer
asking for a tutor is compared with service compositions stored
in the procedural knowledge archive. In the second step, similar
service compositions are analyzed with respect to authorship.
Based on the authors of service compositions that are similar to
the partially ﬁnished service composition, a list of recommended
tutors is generated.

In the research presented in this paper, we assume that each
archived service composition has one author and that this informa-
tion is available. We are aware that this information could not be
easily accessible because of consumers’ privacy settings and that
many service compositions will have more than one author. We
leave this issue for future work.

5.1. Procedural knowledge encoding features

Consumers build new compositions using Geppeto by compos-
ing existing services deﬁning control, data, and event ﬂow as well
as time, communication, and synchronization dependencies. While
a precise description of a composition including semantic annota-
tion of the used components and the connections between them
might provide more information for precise comparison of a partial
composition and an archived composition, this kind of representa-
tion presents four signiﬁcant challenges. First, a formal model that
would represents all these features would inherently be complex.
Second, matching these representations might be more computa-
tionally expensive. Third, an over-speciﬁc representation might
cause the recommender to miss many useful matchings, which is
akin to the problem of overﬁtting in machine learning. Fourth, a

Consumer

 

c
o
m
p
u
t
i
n
g
e
c
o
-
s
y
s
t
e
m

S
o
c
i
a

l
l
y

 
i
t
n
e

l
l
i

g
e
n
t

(
2
)

c
o
m
p
o
s
i
t
i
o
n

P
a
r
t
i
a

l
 

(
3
)

t
u
t
o
r
s

R
e
c
o
m
m
e
n
d
e
d

Peer-tutored

service 

composition

P
e
e
r
 
t
u
t
o
r
i
n
g

(
4
)

C
o
m
p
o
s
i
t
i
o
n
s

(
1
)

Consumer
community

Encoded partial 

composition

Service 

composition 

assistant

Composition 
morphology 

and 

authorship 
analyzer

Socially intelligent computing eco-system

Social computing environment

Social 

networks

Wikis

Instant 

messaging

...

Service 

composition 

assistant

Knowledge 

mining

recommender 

Tutor 

wizard

Knowledge 
archiving

Service 

composition 

assistant

Machine intelligence environment

Community 
knowledge 

archive

Composition 
morphologies 

and 

authorship 
extractor

Encoded 

compositions

Service 

composition 

assistant

Procudural knowledge mining

Procedural knowledge archiving

Fig. 4. Peer-tutored service composition process.

1034

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

speciﬁc representation might not be applicable in various service
composition domains, and would have to be changed to address
the particularities of each domain.

Therefore, we chose to use a signiﬁcantly simpler composition
representation based on a binary feature vector that encodes the
used component services and the connections between them. This
representation can be easily extracted from the textual encoding of
a composition, such as that in Fig. 3.

The vector representation of the service composition presented
in Fig. 3 is shown in Fig. 5. The composition is illustrated for com-
pactness with an undirected graph where components are repre-
sented with vertices and connections are represented with edges.
The feature vector holds binary values, where the value 1 marks
the presence of a component or connection in the composition,
while the value 0 marks the absence of the corresponding compo-
nent or connection. The feature vector from Fig. 3 has the value 1
for CA, GL, and DD elements, because the application is composed
out of the CurrentAddress widget (CA), the GeoLocation widget (GL),
and the DrivingDirections widget (DD). Additionally, CA–GL and
CA–DD elements have the value of 1 to denote the existence of
connections between these components in the composition.

5.2. Tutor recommendation algorithm

Let the set of all available components be T, and its cardinality
be nT ¼ jTj. Since we need to codify the component list and every
possible pair of these components, every composition ci 2 C is rep-
resented as a vector in n-dimensional space where

:

2

n ¼ nT þ nTðnT   1Þ

ð1Þ
Let the set of all consumers be U. Every consumer ui 2 U has an
associated set of widget compositions Ci, and these sets form a par-
tition of the set of all widget compositions C. Let us assume that a
consumer ux created a partially ﬁnished widget composition cp
and asked the system for expert recommendation. The tutor recom-
mender system takes the partial widget composition cp as input and
outputs a list of k consumers U who have the required expertise.
The ﬁrst step in the tutor recommendation process is to ﬁnd
service compositions that are similar to the partially ﬁnished ser-
vice composition. One of the most popular methods for computing
the similarity between vectors in multidimensional space is Pear-
son’s correlation coefﬁcient (Adomavicius & Tuzhilin, 2005). Pear-
son’s correlation pi;j measures the extent to which two application
vectors ci and cj linearly relate to each other. We use Pearson cor-
relation to generate a similarity vector. A similarity vector sp for
partially ﬁnished service composition cp is generated by calculat-
ing Pearson’s correlation between cp and service compositions in C:
ð2Þ
sp ¼ ½ði; pp;iÞjci 2 C; aðciÞ – ux;

Fig. 5. Undirected graph of the consumer service composition deﬁned on Fig. 3 and
the corresponding feature vector (CA – CurrentAddress widget, GL – GeoLocation
widget, and DD – DrivingDirections widget).

where aðcÞ denotes the author of the service composition c and i is
the unique identiﬁer of ci. Service compositions written by author
ux are not included in the similarity vector.

In order to obtain the most similar compositions to cp, we sort
the tuples in sp and generate a sorted similarity vector ssp. Since
our goal is to recommend authors of similar service compositions,
we extract authors from the sorted similarity vector ssp:
U ¼ ½aðciÞjði; pp;iÞ 2 ssp:

ð3Þ
The ﬁnal list U is then generated by removing duplicates from
U. U is the list of consumers who have built service compositions
most similar to the observed partially ﬁnished service composition
cp.

For example, assume that the consumer aims to develop an
application similar to the service composition in Fig. 3. We will
present how Pearson’s correlation coefﬁcient for the partially ﬁn-
ished service composition and the completed service composition
changes as the partial composition approaches the ﬁnal goal.

After adding CurrentAddress and GeoLocation widgets, the fea-
ture vector for the partially ﬁnished composition is [1,1,0, 0,0, 0]
and the Pearson correlation coefﬁcient is 0.31. By adding the data
ﬂow action of copy Latitude@GeoLocation to Latitude@CurrentAd-
dress, the feature vector for this partially ﬁnished composition is
[1,1,0,1,0, 0] and the Pearson correlation coefﬁcient is 0.44. By
adding the DrivingDirections widget and the data ﬂow action copy
Address@CurrentAddress to Fromaddress@DrivingDirections, the fea-
ture vector for this partially ﬁnished composition is [1,1,1,1,1,0]
and the Pearson correlation coefﬁcient changes to 1.0.

The recommended lists of tutors from our experimental dataset
for the given three situations are: A.R., S.R., P.D. for the ﬁrst stage,
A.R., S.R., P.D for the second stage, and S.R., A.R., P.D for third stage
of service composition. Since the actual author of this composition
was S.R., we can see that this author is identiﬁed as a good candi-
date peer-tutor in all three stages because the partial composition
is similar to the completed composition.



 

We conclude this section with an analysis of the computational
complexity of the described recommender algorithm. With nT dis-
tinct components available in the composition system, the dimen-
sionality of the feature vector space is O n2
, as both components
T
and undirected connections are represented with one dimension
each. However, the feature vectors can be encoded much more efﬁ-
ciently with a sorted list of nonzero coordinates. This is because
feature vectors in this space are very sparse as most compositions
use a much smaller number of component services. Given a com-
position with n components and m connections, the feature vector
encoding size is therefore Oðn þ mÞ.

Computing the Pearson correlation coefﬁcient of two vectors
requires time linear in the size of the vectors. The algorithm com-
putes the Pearson correlation coefﬁcient between the vectors of
the input partial composition and every composition in the
archive. This is a limiting factor in the scalability of the algorithm.
With this simple approach, archives of several thousand composi-
tions can easily be processed in a responsive manner, which is suf-
ﬁcient for many environments. As the main objective of this paper
is to test the effectiveness of peer tutoring with respect to service
composition knowledge identiﬁcation, we do not discuss this issue
of computational complexity further.

6. Tutor recommender tool

To support peer tutoring, we have augmented Geppeto with the
tutor recommender system presented in Section 5. The implemen-
tation of the recommender in the Geppeto environment is pre-
sented in Fig. 6. The Geppeto environment consists of a frontend
that runs within the browser and a backend that runs on one of

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

1035

the Geppeto cloud servers. The frontend consists of a widget con-
tainer and a widget list tool. The widget container provides a run-
time environment for widget execution and composition, and pro-
vides tools for widget administration. The widget list tool is used
by consumers to access existing widgets that are used as compo-
nents. The Geppeto TouchMe widget records consumer created
compositions, as described earlier. As part of the tutor recom-
mender system, we implemented the Geppeto MentorMe widget
that allows consumers to ask for a tutor and then lists tutor candi-
dates retrieved from the recommender.

The system backend runs services that support the execution of
the widget container’s tools, consumer widgets, the TouchMe and
MentorMe widgets, and runs the widget database service, the rec-
ommender service and other services that support things like
authentication and content caching.

A more detailed view of the recommender service as part of the
tutor recommender subsystem is shown in Fig. 7. The MentorMe
widget monitors the process of service composition and forwards
partially ﬁnished compositions to the recommender service (1).
The composition pre-processor component is responsible for parsing
consumer service compositions and extracting feature vectors.
Additionally, the composition pre-processor periodically updates
the feature vector database with vector representation of ﬁnished
consumer service compositions stored in the service composition
database. The feature vector that represents the partial composi-
tion is then forwarded to the service similarity calculator (2). The
service similarity calculator then produces a sorted list with the
most similar compositions fetched from the feature vector data-
base (3) and forwards that list to the authorship identiﬁer module
(4). The authorship identiﬁer assigns author names to the selected
service compositions. Finally, this list of authors is returned to the
consumer through the MentorMe widget (5).

6.1. MentorMe widget user interface

The user interface of the MentorMe widget is presented in Fig. 8.
The MentorMe widget displays a list of widgets currently in use by
the consumer, i.e. widgets that are being used to create a new com-
position. Consumers have an option to remove some of these wid-
gets directly from the MentorMe widget, which enables them to
direct the tutor recommender system to the particular problem
area by excluding the removed widgets from the query feature vec-
tor. The recommended peer-tutors are displayed with their user-
name, social contacts, availability status, similarity score, and a
timestamp of their last activity.

Service composiƟon 

database

MentorMe

widget

(6)

(1)

(5)

Authorship
idenƟﬁer

(4)

(2)

ComposiƟon 
preprocessing

Service similarity 

calculator

(7)

(3)

Feature vector 

database

Tutor recommender subsystem

Fig. 7. Architecture of the Tutor recommender subsystem.

7. Consumer study

We evaluated our peer tutoring system on a group of 56 stu-
dents through assignments they completed in a computer lab.
The assignments were structured as sets of tasks, where each task
was a relatively simple service composition that students were
directed to create using Geppeto. All the service compositions were
deﬁned to be similar in complexity and in expected completion
time. The average task required composing three to six simple wid-
gets into a new application. For instance, one task was deﬁned as
follows: Compose a new widget that renders driving directions from
your current address to a given destination address on a map.

Each student had a separate cubicle with a computer running
only a Web browser with two tabs opened: Geppeto running in
one and a stopwatch application in the other. We explicitly
requested and enforced complete silence and no cooperation
between neighboring students. Before handing out assignments,

Widget container

TouchMe widget

(Service composiƟon 

assistant)

ParƟal 

composiƟon

MentorMe widget
(Tutor recommender 

wizard)

List of 

recommended 

tutors

Widget 

1

...

Widget 

n

Widget list

Widget 

1
...

Widget 

n

Container 
and widget 

services

Recomender 

service

Widget 

direcory and 

database

Fig. 6. The Geppeto environment enhanced with the tutor recommender system.

F
r
o
n
t
e
n
d

 
 
 
 
 

B
a
c
k
e
n
d

1036

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

7.2. Results and discussion

To be as objective as possible in peer tutoring evaluation, we
chose different groups of metrics. These metrics include both par-
ties in peer tutoring, one receiving help and one providing help.
Also, we include objective metrics based on performance measure-
ment and subjective metrics based on consumer experience.
Therefore, we use two performance metrics and two quality of
experience (QoE) metrics.

The performance metrics measure consumers’ behavior. We
chose two performance metrics: time-on-task and task success.
The time-on-task metric measures time consumers need for com-
pletion of the service composition. The task success metric mea-
sures percentages of consumers that successfully complete
service composition. The QoE metrics are a self-reported metrics
based on consumer’s experiences. Two user experience metrics
are used that represent the subjective satisfaction of either those
who received or provided help. Consumers rated their satisfaction
with the help provided from tutors, while tutors rated their own
satisfaction with the help they provided.

In this section we present and discuss the results of our student
studies for each metric separately. Before discussing the experi-
mental results, Table 1 shows how different groups perceived the
complexity of the given widget composition tasks. Upon complet-
ing tasks, students were asked to assign a complexity score on a
scale from 1 to 5, where 1 corresponds to simple tasks and 5 to com-
plex tasks. Since there is no signiﬁcant difference between groups,
we conclude that we can safely compare results from different
groups and that results of these comparisons are meaningful.

7.2.1. Time-on-task metric

We start measuring task time at the moment when students
start reading the text of the task and stop measuring at the
moment when the supervising TA conﬁrms that the task service
composition is successfully ﬁnished. The time-on-task results for
a total of 188 successfully completed tasks are shown in Table 2.
Our results show that the Recommender Assistance group per-
formed signiﬁcantly better having time-on-task almost 3 min lower
than the No Assistance group, i.e. an improvement in task comple-
tion time is 28:2% (t-test’s p-value < 0:05), while the Random Assis-
tance group performed slightly better than the No Assistance group.
While all students in the No Assistance group that act as tutors
have equal experience in using Geppeto, only some of them have
domain expert knowledge on any speciﬁc composition task. This
includes knowledge about simple widgets that need to be com-
posed and how they need to be interconnected to create the
desired functionality. Therefore, randomly chosen tutors were able
to provide only general help on using Geppeto as a composition
tool, which slightly improved task completion time for the
members of the Random Assistance group. However, our MentorMe

Table 1
Average perceived task complexity.

No assistance group
Recommender assistance group
Random assistance group

Task complexity

2.62
2.67
2.52

Table 2
Completion time for successfully completed tasks and task success rates per group.

Time-on-task (min)

Task success (%)

No assistance group
Recommender assistance group
Random assistance group

10.51
7.53
9.41

95.30
98.50
91.04

Fig. 8. Geppeto MentoMe widget user interface.

we gave a 5-min introductory course on Geppeto to cover basic
service composition methodology. Each assignment was deﬁned
with a list of tasks printed on a piece of paper. Assignments were
handed out to students after the short introduction. There were a
total of ﬁfteen different service composition tasks randomly dis-
tributed among the students, and randomly ordered within each
assignment to avoid any potential systematic impact of the
sequence in which students perform individual tasks. Each student
had three to four widget compositions to complete during one
sixty minute session.

Upon completing a composition, students were instructed to
call the supervising teaching assistants to review their work. Stu-
dents verbally articulated their solutions and demonstrated their
service composition on an example. If the composition was indeed
correct, students were instructed to save the solution and mark the
time needed to ﬁnish the given task. On the other hand, if the ser-
vice composition did not conform to the task requirements, the
student was advised to try again.

7.1. Setup of the study

After the whole group of students listened to the short intro-
ductory course on Geppeto, students were divided into three sep-
arate groups. Each group had two supervising teaching assistants
that monitored students’ progress. Once the ﬁrst group of students
ﬁnished their projects without any help, they were asked to be
peer tutors for the other two groups. We call this ﬁrst group of stu-
dents as the No Assistance group.

Students from the second group were given the same set of
assignments as students from the ﬁrst group. However, unlike
the ﬁrst group, students from the second group were encouraged
to ask for help from the No Assistance group students using the
MentorMe widget. Students from the No Assistance group would
physically approach the student who asked for help assuming
the role of a student tutor. Student tutors were advised to exclu-
sively answer questions they were explicitly asked. We limited
interaction time to two minutes. We denote this second group of
students as the Recommender Assistance group.

The third group of students followed the same rules as the Rec-
ommender Assistance group, except that the tutor recommender
algorithm was changed to choose candidate tutors randomly from
the No assistance group when students would ask for help. We call
this ﬁnal group of students the Random Assistance group.

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

1037

Table 3
User satisfaction results.

Recommender assistance group
Random assistance group

4.35
3.80

4.19
3.75

Help received

Help given

widget correctly identiﬁed tutors with needed domain expert
knowledge, which signiﬁcantly improved task completion time
for the Recommender Assistance group and proved our hypothesis
that domain experts can be identiﬁed based on procedural knowl-
edge inferred from their previous work.

7.2.2. Task success metric

The results for task success in Table 2 also prove our hypothesis.
While the Recommender Assistance group had a nearly perfect task
success rate, the Random Assistance group had poorer results than
the No Assistance group. These results show that false positive rec-
ommendations have a negative impact on task success rate. For
example, during the experiment, we observed a sequence of three
randomly recommended tutors who were unable to assist a
student in ﬁnding a solution.

We conclude that false positive recommendations negatively
impacted the Random Assistance group, but did not impact the
Recommender Assistance group, showing that the proposed tutor
recommender system reduces the number of
false positive
recommendations.

7.2.3. Consumer satisfaction metrics

Our fourth measure of the effectiveness of the proposed peer-
tutor recommender system is the subjective satisfaction of those
who received help and those who provided help. We asked stu-
dents from the Recommender Assistance and Random Assistance
groups to rate the tutoring received from students in the No Assis-
tance group. Also, students from the No Assistance group, who act as
tutors, rate their own satisfaction with help they provided. The sat-
isfaction score was a number on a scale from 1 to 5, where 1 means
that the student was dissatisﬁed with help received/provided and
5 means that student was satisﬁed with received/provided help.
Results for both groups are displayed in Table 3.

Results show signiﬁcant difference in user satisfaction (t-test’s
p-value < 0:05) with received help between the Recommender
Assistance and Random Assistance groups. This result shows that,
on average, students from the Recommender Assistance group are
more satisﬁed with received help than students from the Random
Assistance group. These results show that the recommender ﬁnds
tutors with the adequate expertise and that these students are
more qualiﬁed for providing help than randomly selected students
from the Random Assistance group.

Much more difﬁcult was for students to rate themselves as
tutors, because students act as tutors in both groups tried very
hard to help. Although randomly selected students who provided
help to the Random Assistance group did not themselves work with
similar service compositions, they still provided help based on
their experience with Geppeto. However, students that acted as
tutors in the Recommender Assistance group showed higher satisfac-
tion with the help they provided than students that tutored in the
Random Assistance group.

8. Conclusion and future work

In this paper, we build on our previous work in consumerization
of services, and deﬁne a peer-tutor recommender system for service
composition. The presented recommender system is based on
socially-intelligent computing through two core processes. First,

the recommender uses machine intelligence to identify experts’
service composition knowledge based on procedural knowledge
stored in previously created compositions. Second, social comput-
ing is used to match these experts with their peers who need their
assistance in creating a new service composition.

The proposed tutor recommendation algorithm represents ser-
vice compositions with two sets of features-the list of component
services used in the composition, and the list of component con-
nections. These sets of features are derived from the morphology
of a service composition and merged into a multidimensional bin-
ary feature vector. Given a partial service composition as input, the
recommender ﬁnds peers with relevant expert knowledge by
searching for similar service compositions that have been deﬁned
previously. These expert peers are then recommended to the con-
sumer, and the consumer is encouraged to approach them for help,
through various means of communication.

The described peer-tutor recommender was implemented as an
extension of our consumerized service composition tool Geppeto.
Geppeto allows consumers to compose services via service GUI
extensions in the form of widgets through programming by dem-
onstration and representing service composition in semi graphical
tabular spreadsheet like form.

We evaluated the peer tutoring system through a consumer
study. The consumer study was conducted with students in a lab
environment. The students were instructed to create several service
compositions using Geppeto. All students had previous experience
with general purpose programming languages like C and Java, but
no experience in service composition or with Geppeto. The students
were brieﬂy instructed on the basics of Geppeto at the start of the
experiment. They were then divided into three groups-the No Assis-
tance group which worked with no outside help, the Recommender
Assistance group which used the proposed peer-tutor recommender
system, and the Random Assistance group for which the recom-
mender suggested random tutors. Two performance metrics and
two quality of experience (QoE) metrics were considered to objec-
tively evaluate the proposed tutor recommender.

The experimental results gathered in the consumer study con-
ﬁrm the effectiveness of the proposed peer-tutor recommender
system. We observed a reduction in project completion time
( 30%), an increase of overall project success ( 10%), an increase
of consumers’ satisfaction with received assistance ( 15%), and
an increase of consumers’ satisfaction with provided assistance
( 12%). The obtained results support our hypothesis that it is pos-
sible to identify peer-tutors with required service composition
knowledge based on their procedural knowledge stored in previ-
ously deﬁned compositions.

These results provide a strong basis for further research in con-
sumerization of service composition tools and peer-tutored knowl-
edge sharing. However, the presented research still has much room
for improvement. Besides the already discussed issue with compu-
tational complexity of the proposed recommendation algorithm,
the problem of tutor availability requires further research. For
instance, the recommendation algorithm could make use of data
about past tutor activity, scope, score and location. Using this addi-
tional information about tutor’s past performance, the algorithm
could inform consumers whom to call for a speciﬁc problem and
when to call them. In the extreme case when tutors are not present
at all for a certain period of time, some type of fail-back mecha-
nism in form of automatic assistance could be provided, for
instance, by suggesting services that could be included into the
composition or even suggesting whole compositions to consumers.
Besides basic face-to-face interaction, our future research will
include social computing tools, primarily video call for remote
assistance. Moreover, video call could be enhanced with direct
connection of tutor and tutee working environments, much like
customer support using remote desktop. Another line of future

1038

K. Vladimir et al. / Expert Systems with Applications 42 (2015) 1028–1038

research could enable tutors to record development progress of
their service compositions. Recorded compositions could then be
exposed in form of interactive references for the larger consumer
community. Furthermore, research on tutor involvement could
include some form of external motivation, for example, community
badges or ‘‘karma’’ points.

In addition to academia, we believe that the presented research,
with its theoretical framework and practical implementation, is
also interesting to the industry. Many programming environments
would beneﬁt with the introduction of a peer-tutoring platform as
the advanced form of community support. The presented recom-
mendation algorithm is based only on components used in the
composition and connections between those components, and thus
is applicable for any programming environment where basic build-
ing blocks could be abstracted into components, such as domain-
speciﬁc programming languages like Scratch,4 visual programming
languages like PureData5 or even general purpose programming lan-
guages like Python.6 Additionally, traditional (ofﬂine) peer tutoring
could scale considerably with the introduction of tutor recommen-
dation system that enables fast and seamless location of tutors with
the required expertise. For example, in a university course context
where service composition is taught, the presented approach could
allow students to identify other students or course staff who could
efﬁciently help them with a problem they might encounter.

Acknowledgments

The authors acknowledge the support of the Ministry of Sci-
ence, Education, and Sports of the Republic of Croatia through
the Computing Environments for Ubiquitous Distributed Systems
(036-0362980-1921) research project.

References

Ackerman, M. S., & Halverson, C. (2004). Sharing expertise: The next step for

knowledge management. Social Capital and Information Technology, 273–299.

Adomavicius, G., & Tuzhilin, A. (2005). Toward the next generation of recommender
IEEE

systems: A survey of the state-of-the-art and possible extensions.
Transactions on Knowledge and Data Engineering, 17(6), 734–749.

De Angeli, A., Battocchi, A., Roy Chowdhury, S., Rodriguez, C., Daniel, F., & Casati, F.
(2011). Conceptual design and evaluation of wire: a wisdom-aware eud tool.
Tech. rep., University of Trento.

Bakker, T. (2002). Virtual reference services: Connecting users with experts and
Benkler, Y., & Nissenbaum, H. (2006). Commons-based peer production and virtue⁄.

supporting the development of skills. Liber Quarterly, 12(2/3), 124–137.

Journal of Political Philosophy, 14(4), 394–419.

Berners-Lee, T., Hendler, J., & Lassila, O. (2001). The semantic web. Scientiﬁc

American, 284(5), 28–37.

Bobick, M., & Wimmer, C. (2012). Knowledge correlation search engine. US Patent

App. 13/400,829.

Burrows, S. (2010). Source code authorship attribution (Ph.D. thesis), School of
Computer Science and Information Technology, Melbourne, Australia: RMIT
University.

Chiu, C.-M., Hsu, M.-H., & Wang, E. T. (2006). Understanding knowledge sharing in
virtual communities: An integration of social capital and social cognitive
theories. Decision Support Systems, 42(3), 1872–1888.

Deng, S., Huang, L., & Xu, G. (2014). Social network-based service recommendation
with trust enhancement. Expert Systems with Applications, 41(18), 8075–8084.
Eckert, P. (2006). Communities of practice. Encyclopedia of Language and Linguistics,

2, 683–685.

Ehrlich, K. (2003). Locating expertise: Design issues for an expertise locator system.
In Sharing Expertise-Beyond Knowledge Management (pp. 137–158). Cambridge:
MIT Press.

Elmeleegy, H., Ivan, A., Akkiraju, R., & Goodwin, R. (2008). Mashup advisor: A
recommendation tool for mashup development. In IEEE international conference
on web services, 2008. ICWS’08 (pp. 337–344). IEEE.

Greenshpan, O., Milo, T., & Polyzotis, N. (2009). Autocompletion for mashups.

Proceedings of the VLDB Endowment, 2(1), 538–549.

4 http://scratch.mit.edu/
5 http://puredata.info
6 https://www.python.org/

Hinds, P. J., Patterson, M., & Pfeffer, J. (2001). Bothered by abstraction: The effect of
expertise on knowledge transfer and subsequent novice performance. Journal of
Applied Psychology, 86(6), 1232.

Jannach, D., Zanker, M., Felfernig, A., & Friedrich, G. (2010). Recommender systems:

An introduction. Cambridge University Press.

Jie, G., Bo, C., Junliang, C., & Xiangtao, L. (2009). Applying recommender system
In IEEE Global

based mashup to web-telecom hybrid service creation.
Telecommunications Conference, 2009. GLOBECOM 2009 (pp. 1–5). IEEE.

Jones, M. C., & Churchill, E. F. (2009). Conversations in developer communities: a
preliminary analysis of the yahoo! pipes community. In Proceedings of the fourth
international conference on Communities and technologies (pp. 195–204). ACM.

Kautz, H., Selman, B., & Shah, M. (1997). Referral web: Combining social networks

and collaborative ﬁltering. Communications of the ACM, 40(3), 63–65.

Liao, S.-h. (2003). Knowledge management technologies and applications-literature

review from 1995 to 2002. Expert Systems with Applications, 25(2), 155–164.

McDonald, D. W., & Ackerman, M. S. (1998). Just talk to me: A ﬁeld study of
expertise location. In Proceedings of the 1998 ACM conference on computer
supported cooperative work (pp. 315–324). ACM.

McDonald, D. W., & Ackerman, M. S. (2000). Expertise recommender: A ﬂexible
recommendation system and architecture. In Proceedings of the 2000 ACM
conference on computer supported cooperative work (pp. 231–240). ACM.

McLure Wasko, M., & Faraj, S. (2000). it is what one does: Why people participate
and help others in electronic communities of practice. The Journal of Strategic
Information Systems, 9(2), 155–173.

Moreira, C., & Wichert, A. (2013). Finding academic experts on a multisensor
approach using shannon’s entropy. Expert Systems with Applications, 40(14),
5740–5754.

Parejo, J. A., Segura, S., Fernandez, P., & Ruiz-Cortés, A. (2014). Qos-aware web
services composition using grasp with path relinking. Expert Systems with
Applications, 41(9), 4211–4223.

Quinn, A. J., & Bederson, B. B. (2011). Human computation: A survey and taxonomy
of a growing ﬁeld. In Proceedings of the SIGCHI conference on human factors in
computing systems (pp. 1403–1412). ACM.

Radeck, C., Lorz, A., Blichmann, G., & Meißner, K. (2012). Hybrid recommendation of
composition knowledge for end user development of mashups. In ICIW 2012,
The seventh international conference on internet and web applications and services
(pp. 30–33).

Roy Chowdhury, S., Rodríguez, C., Daniel, F., & Casati, F. (2012). Baya: Assisted
mashup development as a service. In Proceedings of the 21st international
conference companion on world wide web (pp. 409–412). ACM.

Shami, N. S., Ehrlich, K., Gay, G., & Hancock, J. T. (2009). Making sense of strangers’
expertise from signals in digital artifacts. In Proceedings of the SIGCHI conference
on human factors in computing systems (pp. 69–78). ACM.

Shirky, C.

(2010). Cognitive surplus: How technology makes consumers

into

collaborators. Penguin.

Silic, M., Delac, G., Krka, I., & Srbljic, S. (2013). Scalable and accurate prediction of
availability of atomic web services. IEEE Transactions on Services Computing, 1.
Srbljic, S., Skvorc, D., & Popovic, M. (2012). Programming languages for end-user
for Control,

personalization of cyber-physical systems. Automatika–Journal
Measurement, Electronics, Computing and Communications, 53(3).

Srbljic´, S., Škvorc, D., & Skrobo, D. (2009). Widget-oriented consumer programming.

Automatika, 50(3-4), 252–264.

Srbljic´, S., Škvorc, D., & Skrobo, D. (2011). Programming language design for event-
for Control, Measurement,

driven service composition. Automatika–Journal
Electronics, Computing and Communications, 51(4).

Stolee, K. T., Elbaum, S., & Sarma, A. (2013). Discovering how end-user programmers
and their communities use public repositories: A study on yahoo! pipes.
Information and Software Technology, 55(7), 1289–1303.

Tapia, B., Torres, R., Astudillo, H., & Ortega, P. (2011). Recommending apis for
mashup completion using association rules mined from real usage data. In SCCC
(pp. 83–89).

Terveen, L., Hill, W., Amento, B., McDonald, D., & Creter, J. (1997). Phoaks: A system

for sharing recommendations. Communications of the ACM, 40(3), 59–62.

Terveen, L., & McDonald, D. W. (2005). Social matching: A framework and research
agenda. ACM Transactions on Computer–Human Interaction (TOCHI), 12(3),
401–434.

Terveen, L. G., Selfridge, P. G., & Long, M. D. (1995). Living design memory:
lessons learned. Human–Computer Interaction,

implementation,

Framework,
10(1), 1–37.

Vladimir, K. (2013). Peer tutoring in consumer computing. (Ph.D. thesis). Faculty of

Electrical Engineering and Computing, Croatia: University of Zagreb.

Wasko, M. M., & Faraj, S. (2005). Why should i share? Examining social capital and
knowledge contribution in electronic networks of practice. MIS Quarterly,
35–57.

Wenger, E. (1998). Communities of practice: Learning, meaning, and identity.

Cambridge University Press.

Xin, X., King, I., Deng, H., & Lyu, M. R. (2009). A social recommendation framework
based on multi-scale continuous conditional random ﬁelds. In Proceedings of the
18th
knowledge management
(pp. 1247–1256). ACM.
J., Benatallah, B., Casati, F., & Daniel, F. (2008). Understanding mashup
development. Internet Computing, IEEE, 12(5), 44–52.

ACM conference

information

and

Yu,

on

Zheng, Z., Ma, H., Lyu, M. R., & King,

I.

recommendation by collaborative ﬁltering.
Computing, 4(2), 140–152.

(2011). Qos-aware web service
IEEE Transactions on Services

